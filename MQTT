**************************************//PYTHON FILES\\******************************************
3_5sensor.py--->

import time
import paho.mqtt.client as mqtt_client
import serial

my_id = 111

interval = 100
set = True

min = 100
max = 0

def get_connection(port):
    ser = serial.Serial(port, timeout=1)
    return ser

client = mqtt_client.Client()

broker = "broker.emqx.io"
try:
    client.connect(broker)
except Exception:
    print('Failed to connect, check network')
    exit()
ser = get_connection('COM8')
steps = 0

while True:
    if ser.in_waiting > 0:
        if ser.in_waiting >= 2 or interval <= 0:
            set = False
            interval += 1
        print("In waiting: " + str(ser.in_waiting))
        data = ser.read(1)
        if min > data[0]:
            min = data[0]
        client.publish("lab/%s/photo/min" % my_id, min)
        if max < data[0]:
            max = data[0]
        client.publish("lab/%s/photo/max" % my_id, max)

        print("Value: " + str(data[0]))
        print("Min: " + str(min) + ", max: " + str(max))
        client.publish("lab/%s/photo/stream" % my_id, data[0])
        ser.write(bytearray([int(ord("I")), int(interval)]))
        print("Interval: " + str(interval))
        if set:
            if steps % 10 == 0:
                interval -= 1
        steps += 1
        print("==============\n")
     
**************************************//PYTHON FILES\\******************************************
     
 5led.py---->
import time
import paho.mqtt.client as mqtt_client
import random
import serial

buffer = []
my_id = 111
min = 100
max = 0

def get_connection(port):
    ser = serial.Serial(port, timeout=1)
    return ser

def on_message(client, userdata, message):
    global max
    global min
    data = message.payload
    topic = message.topic
    print(f"Received message on {topic}: {data}. min: {min}, max: {max}")

    if topic == "lab/%s/photo/max" % my_id:
        max = int(data)

    if topic == "lab/%s/photo/min" % my_id:
        min = int(data)

    if topic == "lab/%s/photo/stream" % my_id:
        if int(data) < (min + max) / 2:
            ser.write(bytearray([ord('1')]))
        else:
            ser.write(bytearray([ord('0')]))

broker = "broker.emqx.io"

client = mqtt_client.Client(f'lab_{random.randint(10000, 99999)}')
client.on_message = on_message

try:
    client.connect(broker)
except Exception:
    print('Failed to connect, check network')
    exit()

client.loop_start()

print('Subscribing')
client.subscribe("lab/%s/photo/stream" % my_id)
client.subscribe("lab/%s/photo/min" % my_id)
client.subscribe("lab/%s/photo/max" % my_id)

ser = get_connection('COM8')

time.sleep(600)
client.disconnect()
client.loop_stop()
print('Stop exchange')

**************************************//PYTHON FILES\\******************************************
1st2nd.py

import time

import paho.mqtt.client as mqtt_client
from statistics import mean
import serial

my_id = 111
values = []
initial = True

def get_connection(port):
    ser = serial.Serial(port, timeout=1)
    return ser

client = mqtt_client.Client()

broker = "broker.emqx.io"
try:
    client.connect(broker)
except Exception:
    print('Failed to connect, check network')
    exit()

ser = get_connection('COM8')

while True:
    if ser.in_waiting > 0:
        data = ser.read(1)
        print(data[0])
        client.publish("lab/%s/photo/instant" % my_id, data[0])
        if initial:
            values = [data[0] for i in range(100)]
            initial = False
        values.pop(0)
        values.append(data[0])
        client.publish("lab/%s/photo/averge" % my_id, mean(values))
    time.sleep(0.01)
    
    **************************************//PYTHON FILES\\******************************************
    4th.py
    
    
import time
import paho.mqtt.client as mqtt_client
import random
import serial

buffer = []

my_id = 111

min = 100
max = 0

def get_connection(port):
    ser = serial.Serial(port, timeout=1)
    return ser


def on_message(client, userdata, message):
    global max
    global min
    data = message.payload
    topic = message.topic
    print(f"Received message on {topic}: {data}. min: {min}, max: {max}")

    if topic == "lab/%s/photo/max" % my_id:
        max = int(data)

    if topic == "lab/%s/photo/min" % my_id:
        min = int(data)

    if topic == "lab/%s/photo/stream" % my_id:
        if int(data) < (min + max) / 2:
            ser.write(bytearray([ord('1')]))
        else:
            ser.write(bytearray([ord('0')]))

broker = "broker.emqx.io"

client = mqtt_client.Client(f'lab_{random.randint(10000, 99999)}')
client.on_message = on_message

try:
    client.connect(broker)
except Exception:
    print('Failed to connect, check network')
    exit()

client.loop_start()

print('Subscribing')
client.subscribe("lab/%s/photo/stream" % my_id)
client.subscribe("lab/%s/photo/min" % my_id)
client.subscribe("lab/%s/photo/max" % my_id)

ser = get_connection('COM8')

time.sleep(600)
client.disconnect()
client.loop_stop()
print('Stop communication')

**************************************//INO FILES\\******************************************
led.ino

#define led 3

void setup() {
  pinMode(led, OUTPUT);
  Serial.begin(9600);
}

void loop() {
  while (Serial.available() > 0){
    int value = Serial.read();
    if (value == '0'){
      digitalWrite(led, LOW);
    }
    else if (value == '1'){
      digitalWrite(led, HIGH);
    }
  }
}

**************************************//INO FILES\\******************************************

sensor.ino


#define sensor_pin A0

long interval = 1000;
long prev;

void setup() {
  pinMode(sensor_pin, INPUT);
  Serial.begin(9600);
  prev = millis();
}

void loop() {
  if (Serial.available() >= 2){
    if (Serial.read() == 'I'){
      interval = long(Serial.read());
    }
  }
  if (millis() - prev >= interval){
    char value = analogRead(sensor_pin) / 1024.0 * 101;
    Serial.write(value);
    prev = millis();
  }
}
        
        
        
